使用Number()将字符串转化为数字，结果将""转换为0；
解决方法：使用parseInt()代替Number()；

自定义类的时候在原型上添加引用类型的属性，一实例对该属性做非覆盖型修改时会影响所有实例该属性的值。
解决方法：将引用类型的属性定义在构造函数中，每次新建实例都生成一个全新的数组。
解决方法：或是在对该属性做改变时克隆一个值完全相同的新属性，并只在新属性上做改变。

创建递归函数时，在函数内部引用本函数，当函数被赋值给一个新变量，然后原来存储函数的变量被重新赋值后，原函数就会执行错误。
解决方法：将递归函数内部对函数的引用改成arguments.callee。
解决方法：在严格模式下不能通过脚本访问arguments.callee，可以使用命名函数表达式来达到相同的效果。

this.setState({count:this.state.count+1})
this.setState({count:this.state.count+1})
this.setState({count:this.state.count+1})
这种操作并不会连续累加count属性多次，因为每次setState时react并没有立即更新state。
只是会把新的状态存到一个队列中，最后合并state与变更的新属性，然后触发渲染。
解决方法：将下一次setState放在上一次setState的第二个参数的回调函数中，这个回调函数只有在state更新后才会执行。
解决方法：将setState写成this.setState((prevState)=>({count:prevState.count+1}))这种形式，
这样react将会把参数函数放到队列中，然后react依次调用队列中的函数，传递前一刻的state。

rem/em/px
px：px是相对于显示器屏幕分辨率而言的。
em：em是相对长度单位，相对当前对象内文本的字体尺寸（默认16px）。
rem：em是相对长度单位，相对HTML根元素的字体尺寸。
移动端适配可以将HTML的font-size设置为width/12,然后全屏宽12rem。